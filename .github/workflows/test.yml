name: Test

on:
  push:
    branches: [master, dev]


jobs:
  test:
    strategy:
      matrix:
        platform: [windows-latest, ubuntu-latest]
        configuration: [Debug, DebugDLL, Release, ReleaseDLL, ProductionRelease, ProductionReleaseDLL]
    runs-on: ${{ matrix.platform }}
  
    steps:
      - uses: actions/checkout@v4

      - name: Install vs_to_cmake
        run: pip install .

      - name: Get test project
        uses: actions/checkout@v4
        with:
          repository: LazyPanda07/HTTP
          path: HTTP
          submodules: recursive

      - name: Add MSBuild to PATH
        if: ${{ matrix.platform == 'windows-latest' }}
        uses: microsoft/setup-msbuild@main

      - name: Setup build type
        shell: pwsh
        run: echo "BUILD_TYPE=$(if ("${{ matrix.configuration }}".Contains("Release")) { echo "Release" } else { echo "Debug" })" >> $Env:GITHUB_ENV

      - name: Setup platform
        shell: pwsh
        run: echo "PLATFORM=$(if ("${{ matrix.platform }}".Contains("windows")) { echo "__WIN32__" } else { echo "__LINUX__" })" >> $Env:GITHUB_ENV

      - name: Generate HTTP CMakeLists.txt
        run: |
            cd HTTP
            vs_to_cmake -f HTTP.vcxproj -d ${{ env.PLATFORM }}
            cat CMakeLists.txt
      
      - name: Generate JSON CMakeLists.txt
        run: |
            cd HTTP/JSON
            vs_to_cmake -f JSON.vcxproj -d ${{ env.PLATFORM }}
            cat CMakeLists.txt

      - name: CMake
        run: |
            cd HTTP
            mkdir build
            cd build
            cmake -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} -DVS_BUILD_CONFIGURATION=${{ matrix.configuration }} ..

      - name: Build
        if: ${{ matrix.platform == 'windows-latest' }}
        run: |
            cd HTTP/build
            msbuild /p:Configuration=${{ env.BUILD_TYPE }} /p:Platform=x64 INSTALL.vcxproj

      - name: Build
        if: ${{ matrix.platform == 'ubuntu-latest' }}
        run: |
            cd HTTP/build
            make install
